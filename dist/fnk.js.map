{"version":3,"sources":["../fnk.js"],"names":[],"mappings":"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","file":"fnk.js","sourcesContent":["'use strict';\n\n/*\n * Takes two arrays, returns an array with any elements that the arrays do not share.\n */\nconst arrayDiff = (a, b) => a.filter(x => b.indexOf(x) === -1);\n\n/*\n  Takes a higher order func as a string, returns a func that takes a thing\n  (The thing may be an array), and a functor, then applies the functor either\n  as a regular function (if the thing is not an array-like)\n  or applies it to the iterable using the wrapped higher order function.\n\n  Example:\n  maybeMap([1, 2, 3], double); // [2, 4, 6]\n  maybeMap(37, double); // 74\n\n  */\nconst maybeIterableWrapper = higherOrderFunc => (thing, fn) => Array.isArray ? thing[higherOrderFunc](fn) : fn(thing);\nconst maybeForEach = maybeIterableWrapper('forEach');\nconst maybeSort    = maybeIterableWrapper('sort');\nconst maybeMap     = maybeIterableWrapper('map');\n\n/**\n * Returns an iterator function to run fn on x a specified number of times.\n * @param function\n * @param number of times to iterate over the function\n * @return x value to pass into fn, then the function iterates over its own result\n */\nconst createIterator = (fn, times) => x => {\n  let result = fn(x);\n  let i = times - 1;\n  while (i) {\n    i--;\n    result = fn(result);\n  }\n  return result;\n};\n\n/**\n * A memoizer using ES6 maps\n * @param  function to be memoized\n * @return function to take variable args, and utilize the cache.\n */\n\nconst cache = (func) => {\n  const cache = new Map();\n\n  return (...args) => {\n    const key = [...args]\n      .map(JSON.stringify)\n      .join(',');\n\n    return cache.has(key) ?\n           cache.get(key) :\n           cache.set(key, func(...args))\n                .get(key);\n    }\n}\n\n/**\n * Fills an array of size n with value v\n * @param number n of items to go into the array\n * @param value v of item to fill array with\n * @return an array of size n with value v\n */\n\nconst fillArray = (n, v) =>\n  [...Array(parseInt(n, 10))].map(() => v);\n\n/*\n * Takes an array or string and a thing and tells you if the thing is in the array or string.\n */\nconst has    = (collection, thing) => collection.indexOf(thing) !== -1;\nconst hasNot = (collection, thing) => !has(collection, thing);\n\n/**\n * Takes an object and returns an array of all of its values.\n * @param  Obj\n * @return Array of values\n */\nconst values = obj => {\n  let vals = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)){\n      vals.push(obj[key]);\n    }\n  }\n  return vals;\n}\n\n/**\n * Does the object have an array of keys?\n */\nconst hasKeys = obj => !!Object.keys(obj).length;\n\n/**\n * Pads leftly.\n */\nconst leftPad = (amt, pad) => {\n  pad = pad || '';\n  while (amt) {\n    pad += ' ';\n    amt--;\n  }\n  return pad;\n}\n\n/*\n * Takes a constructor and a value and tells you if the thing is an instance of the constructor.\n */\nconst is = (typeclass, thing) => thing ? thing instanceof typeclass : false;\n\n/*\n * Shortcut for reducing all the values of an object to a single value.\n * Makes parsing objects a bit more functional.\n */\nconst reduceValues = (obj, callback, starter) => values(obj).reduce(callback, starter);\n\n/*\n * Gets the first word of a string.\n * For parsing command args.\n */\nconst firstWord = args => splitArgs(args)[0];\n\n/*\n * Splits a string into an array of words.\n * For parsing command args.\n */\nconst splitArgs = args => args.toLowerCase().split(' ');\n\n/**\n * Function composition with variable arity (lol jargon)\n * @param(s) any number of functions\n * @return  a function that will take all of the functions, then you can pass a single arg to it.\n */\n\nconst compose = (...fns) =>\n  fns.reduce( (f, g) => (a) => f( g( a) ), id);\n\n/**\n * Allows you to set min and max range for a number.\n * Mostly for preventing semi-random results from getting wacky.\n * Usage:\n * // Returns a number guaranteed to be between 0 and 100 inclusive but probably tending toward 100.\n * const arbitraryWithinBounds = setBounds(0, 100);\n * const arbitrarySmallNumber  = arbitraryWithinBounds(Math.random() * 1000);\n * @param Number minimum bound\n * @param Number maximum bound\n * @return Function boundsChecker\n *   @param n Number\n *   @return Number n, unless n is out of bounds, then it will be the nearest bound.\n */\nconst setBounds = (min, max) => n =>\n  Math.max(Math.min(max, stat), min);\n\nmodule.exports = {\n  fillArray, compose,\n  has,       hasNot,\n  firstWord, splitArgs,\n  hasKeys,   leftPad,\n  values,    reduceValues,\n  setBounds, is,\n  cache,     arrayDiff,\n  maybeMap,  maybeSort,\n  createIterator,\n  maybeIterableWrapper,\n  maybeForEach,\n};\n"]}